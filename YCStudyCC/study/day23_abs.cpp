//
// Created by 杨充 on 2023/6/16.
//

//C++ 数据抽象
//数据抽象是指，只向外界提供关键信息，并隐藏其后台的实现细节，即只表现必要的信息而不呈现细节。
//数据抽象是一种依赖于接口和实现分离的编程（设计）技术。

//如何理解数据抽象
//举一个现实生活中的真实例子，比如一台电视机，您可以打开和关闭、切换频道、调整音量、添加外部组件（如喇叭、录像机、DVD 播放器），但是您不知道它的内部实现细节，也就是说，您并不知道它是如何通过缆线接收信号，如何转换信号，并最终显示在屏幕上。
//因此，我们可以说电视把它的内部实现和外部接口分离开了，您无需知道它的内部实现原理，直接通过它的外部接口（比如电源按钮、遥控器、声量控制器）就可以操控电视。


//数据抽象有两个重要的优势：
//类的内部受到保护，不会因无意的用户级错误导致对象状态受损。
//类实现可能随着时间的推移而发生变化，以便应对不断变化的需求，或者应对那些要求不改变用户级代码的错误报告。

//设计策略
//抽象把代码分离为接口和实现。所以在设计组件时，必须保持接口独立于实现，这样，如果改变底层实现，接口也将保持不变。
//在这种情况下，不管任何程序使用接口，接口都不会受到影响，只需要将最新的实现重新编译即可。


#include <iostream>
using namespace std;

void test1();

int main(){
    test1();
    return 0;
}

class Adder {
public:
    // 构造函数
    Adder(int i = 0) {
        total = i;
    }
    // 对外的接口
    void addNum(int number) {
        total += number;
    }
    // 对外的接口
    int getTotal() {
        return total;
    };
private:
    // 对外隐藏的数据
    int total;
};

void test1(){
    Adder a;
    a.addNum(10);
    a.addNum(20);
    int num = a.getTotal();
    cout << "total num :" << num << endl;

    Adder *b;
    b->addNum(10);
}
