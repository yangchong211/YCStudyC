//
// Created by 杨充 on 2023/6/8.
//

//作用域是程序的一个区域，变量的作用域可以分为以下几种：
//局部作用域：在函数内部声明的变量具有局部作用域，它们只能在函数内部访问。局部变量在函数每次被调用时被创建，在函数执行完后被销毁。
//全局作用域：在所有函数和代码块之外声明的变量具有全局作用域，它们可以被程序中的任何函数访问。全局变量在程序开始时被创建，在程序结束时被销毁。
//块作用域：在代码块内部声明的变量具有块作用域，它们只能在代码块内部访问。块作用域变量在代码块每次被执行时被创建，在代码块执行完后被销毁。
//类作用域：在类内部声明的变量具有类作用域，它们可以被类的所有成员函数访问。类作用域变量的生命周期与类的生命周期相同。

#include "iostream"

using namespace std;

void test1();

void test2();

void test3();

void test4();

int main() {
    test1();
    test2();
    test3();
    test4();
    return 0;
}

//局部变量
void test1() {
    int b;
    int c,
            a = 10;
    b = 20;
    c = a + b;
    cout << c << " \n";
}

//全局变量
// 全局变量声明
int g;

void test2() {
    // 局部变量声明
    int a, b;
    // 实际初始化
    a = 10;
    b = 20;
    g = a + b;
    cout << g << " \n";
}

//在程序中，局部变量和全局变量的名称可以相同，但是在函数内，局部变量的值会覆盖全局变量的值。下面是一个实例：
void test3() {
    // 局部变量声明
    int g = 10;
    cout << g << " \n";
}

//类作用域
//类作用域指的是在类内部声明的变量：
class MyClass {
public:
    //类作用域变量
    static int class_var;
private:
    int i;
};

void test4() {

}


