//
// Created by 杨充 on 2023/6/8.
//

//作用域是程序的一个区域，变量的作用域可以分为以下几种：
//局部作用域：在函数内部声明的变量具有局部作用域，它们只能在函数内部访问。局部变量在函数每次被调用时被创建，在函数执行完后被销毁。
//全局作用域：在所有函数和代码块之外声明的变量具有全局作用域，它们可以被程序中的任何函数访问。全局变量在程序开始时被创建，在程序结束时被销毁。
//块作用域：在代码块内部声明的变量具有块作用域，它们只能在代码块内部访问。块作用域变量在代码块每次被执行时被创建，在代码块执行完后被销毁。
//类作用域：在类内部声明的变量具有类作用域，它们可以被类的所有成员函数访问。类作用域变量的生命周期与类的生命周期相同。

#include "iostream"

using namespace std;

//局部变量
void test1();
//全局变量
void test2();
void test3();
//类作用域
void test4();

int main() {
    test1();
    test2();
    test3();
    test4();
    return 0;
}

//局部变量
//在函数或一个代码块内部声明的变量，称为局部变量。它们只能被函数内部或者代码块内部的语句使用。下面的实例使用了局部变量：
void test1() {
    int b;
    int c, a = 10;
    b = 20;
    c = a + b;
    cout << c << " \n";
}

//全局变量
//在所有函数外部定义的变量（通常是在程序的头部），称为全局变量。全局变量的值在程序的整个生命周期内都是有效的。
//全局变量可以被任何函数访问。也就是说，全局变量一旦声明，在整个程序中都是可用的。下面的实例使用了全局变量和局部变量：
// 全局变量声明
int g;

void test2() {
    // 局部变量声明
    int a, b;
    // 实际初始化
    a = 10;
    b = 20;
    g = a + b;
    cout << g << " \n";
}

//在程序中，局部变量和全局变量的名称可以相同，但是在函数内，局部变量的值会覆盖全局变量的值。下面是一个实例：
void test3() {
    // 局部变量声明
    int g = 10;
    cout << g << " \n";
}

//类作用域
//类作用域指的是在类内部声明的变量：
class MyClass {
public:
    //类作用域变量
    static int class_var;
private:
    int i;
};


//以上实例中，MyClass 类中声明了一个名为 class_var 的类作用域变量。可以使用类名和作用域解析运算符 :: 来访问这个变量。
//在 test4() 函数中访问 class_var 时输出的是 30。
int MyClass::class_var = 30;
void test4() {
//    int MyClass::class_var = 20;
    std::cout << "类变量" << MyClass::class_var << std::endl;
}


